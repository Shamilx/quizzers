"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/crypto-ts";
exports.ids = ["vendor-chunks/crypto-ts"];
exports.modules = {

/***/ "(rsc)/./node_modules/crypto-ts/esm5/crypto-ts.js":
/*!**************************************************!*\
  !*** ./node_modules/crypto-ts/esm5/crypto-ts.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AES: () => (/* binding */ AES$1),\n/* harmony export */   SHA256: () => (/* binding */ SHA256$1),\n/* harmony export */   algo: () => (/* binding */ algo),\n/* harmony export */   enc: () => (/* binding */ enc),\n/* harmony export */   lib: () => (/* binding */ lib),\n/* harmony export */   mode: () => (/* binding */ mode),\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   \"ɵa\": () => (/* binding */ BlockCipher),\n/* harmony export */   \"ɵb\": () => (/* binding */ Cipher),\n/* harmony export */   \"ɵc\": () => (/* binding */ BufferedBlockAlgorithm),\n/* harmony export */   \"ɵe\": () => (/* binding */ WordArray),\n/* harmony export */   \"ɵf\": () => (/* binding */ CipherParams),\n/* harmony export */   \"ɵg\": () => (/* binding */ Base),\n/* harmony export */   \"ɵi\": () => (/* binding */ Hasher),\n/* harmony export */   \"ɵj\": () => (/* binding */ SerializableCipher),\n/* harmony export */   \"ɵk\": () => (/* binding */ PasswordBasedCipher),\n/* harmony export */   \"ɵl\": () => (/* binding */ AES),\n/* harmony export */   \"ɵm\": () => (/* binding */ SHA256),\n/* harmony export */   \"ɵn\": () => (/* binding */ Utf8),\n/* harmony export */   \"ɵo\": () => (/* binding */ Latin1),\n/* harmony export */   \"ɵp\": () => (/* binding */ Hex),\n/* harmony export */   \"ɵq\": () => (/* binding */ NoPadding),\n/* harmony export */   \"ɵr\": () => (/* binding */ PKCS7),\n/* harmony export */   \"ɵs\": () => (/* binding */ CBC),\n/* harmony export */   \"ɵt\": () => (/* binding */ BlockCipherMode),\n/* harmony export */   \"ɵu\": () => (/* binding */ ECB)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/crypto-ts/node_modules/tslib/tslib.es6.js\");\n/**\n * @license crypto-ts\n * MIT license\n */\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Hex = /** @class */ (function () {\n    function Hex() {\n    }\n    /**\n     * Converts a word array to a hex string.\n     *\n     * \\@example\n     *\n     *     let hexString = Hex.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The hex string.\n     *\n     */\n    Hex.stringify = /**\n     * Converts a word array to a hex string.\n     *\n     * \\@example\n     *\n     *     let hexString = Hex.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The hex string.\n     *\n     */\n    function (wordArray) {\n        // Convert\n        var /** @type {?} */ hexChars = [];\n        for (var /** @type {?} */ i = 0; i < wordArray.sigBytes; i++) {\n            var /** @type {?} */ bite = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n            hexChars.push((bite >>> 4).toString(16));\n            hexChars.push((bite & 0x0f).toString(16));\n        }\n        return hexChars.join('');\n    };\n    /**\n     * Converts a hex string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Hex.parse(hexString);\n     * @param {?} hexStr The hex string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    Hex.parse = /**\n     * Converts a hex string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Hex.parse(hexString);\n     * @param {?} hexStr The hex string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    function (hexStr) {\n        // Shortcut\n        var /** @type {?} */ hexStrLength = hexStr.length;\n        // Convert\n        var /** @type {?} */ words = [];\n        for (var /** @type {?} */ i = 0; i < hexStrLength; i += 2) {\n            words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n        }\n        return new WordArray(words, hexStrLength / 2);\n    };\n    return Hex;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar WordArray = /** @class */ (function () {\n    /**\n     * Initializes a newly created word array.\n     *\n     * @param words (Optional) An array of 32-bit words.\n     * @param sigBytes (Optional) The number of significant bytes in the words.\n     *\n     * @example\n     *\n     *     let wordArray = new WordArray();\n     *     let wordArray = new WordArray([0x00010203, 0x04050607]);\n     *     let wordArray = new WordArray([0x00010203, 0x04050607], 6);\n     */\n    function WordArray(words, sigBytes) {\n        this.words = words || [];\n        if (sigBytes !== undefined) {\n            this.sigBytes = sigBytes;\n        }\n        else {\n            this.sigBytes = this.words.length * 4;\n        }\n    }\n    /**\n     * Creates a word array filled with random bytes.\n     *\n     * \\@example\n     *\n     *     let wordArray = WordArray.random(16);\n     * @param {?} nBytes The number of random bytes to generate.\n     *\n     * @return {?} The random word array.\n     *\n     */\n    WordArray.random = /**\n     * Creates a word array filled with random bytes.\n     *\n     * \\@example\n     *\n     *     let wordArray = WordArray.random(16);\n     * @param {?} nBytes The number of random bytes to generate.\n     *\n     * @return {?} The random word array.\n     *\n     */\n    function (nBytes) {\n        var /** @type {?} */ words = [];\n        var /** @type {?} */ r = (function (m_w) {\n            var /** @type {?} */ m_z = 0x3ade68b1;\n            var /** @type {?} */ mask = 0xffffffff;\n            return function () {\n                m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n                m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n                var /** @type {?} */ result = ((m_z << 0x10) + m_w) & mask;\n                result /= 0x100000000;\n                result += 0.5;\n                return result * (Math.random() > .5 ? 1 : -1);\n            };\n        });\n        for (var /** @type {?} */ i = 0, /** @type {?} */ rcache = void 0; i < nBytes; i += 4) {\n            var /** @type {?} */ _r = r((rcache || Math.random()) * 0x100000000);\n            rcache = _r() * 0x3ade67b7;\n            words.push((_r() * 0x100000000) | 0);\n        }\n        return new WordArray(words, nBytes);\n    };\n    /**\n     * Converts this word array to a string.\n     *\n     * @param encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n     *\n     * @return The stringified word array.\n     *\n     * @example\n     *\n     *     let string = wordArray + '';\n     *     let string = wordArray.toString();\n     *     let string = wordArray.toString(CryptoJS.enc.Utf8);\n     */\n    /**\n     * Converts this word array to a string.\n     *\n     * \\@example\n     *\n     *     let string = wordArray + '';\n     *     let string = wordArray.toString();\n     *     let string = wordArray.toString(CryptoJS.enc.Utf8);\n     * @param {?=} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n     *\n     * @return {?} The stringified word array.\n     *\n     */\n    WordArray.prototype.toString = /**\n     * Converts this word array to a string.\n     *\n     * \\@example\n     *\n     *     let string = wordArray + '';\n     *     let string = wordArray.toString();\n     *     let string = wordArray.toString(CryptoJS.enc.Utf8);\n     * @param {?=} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n     *\n     * @return {?} The stringified word array.\n     *\n     */\n    function (encoder) {\n        return (encoder || Hex).stringify(this);\n    };\n    /**\n     * Concatenates a word array to this word array.\n     *\n     * @param wordArray The word array to append.\n     *\n     * @return This word array.\n     *\n     * @example\n     *\n     *     wordArray1.concat(wordArray2);\n     */\n    /**\n     * Concatenates a word array to this word array.\n     *\n     * \\@example\n     *\n     *     wordArray1.concat(wordArray2);\n     * @param {?} wordArray The word array to append.\n     *\n     * @return {?} This word array.\n     *\n     */\n    WordArray.prototype.concat = /**\n     * Concatenates a word array to this word array.\n     *\n     * \\@example\n     *\n     *     wordArray1.concat(wordArray2);\n     * @param {?} wordArray The word array to append.\n     *\n     * @return {?} This word array.\n     *\n     */\n    function (wordArray) {\n        // Clamp excess bits\n        this.clamp();\n        // Concat\n        if (this.sigBytes % 4) {\n            // Copy one byte at a time\n            for (var /** @type {?} */ i = 0; i < wordArray.sigBytes; i++) {\n                var /** @type {?} */ thatByte = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                this.words[(this.sigBytes + i) >>> 2] |= thatByte << (24 - ((this.sigBytes + i) % 4) * 8);\n            }\n        }\n        else {\n            // Copy one word at a time\n            for (var /** @type {?} */ i = 0; i < wordArray.sigBytes; i += 4) {\n                this.words[(this.sigBytes + i) >>> 2] = wordArray.words[i >>> 2];\n            }\n        }\n        this.sigBytes += wordArray.sigBytes;\n        // Chainable\n        return this;\n    };\n    /**\n     * Removes insignificant bits.\n     *\n     * @example\n     *\n     *     wordArray.clamp();\n     */\n    /**\n     * Removes insignificant bits.\n     *\n     * \\@example\n     *\n     *     wordArray.clamp();\n     * @return {?}\n     */\n    WordArray.prototype.clamp = /**\n     * Removes insignificant bits.\n     *\n     * \\@example\n     *\n     *     wordArray.clamp();\n     * @return {?}\n     */\n    function () {\n        // Clamp\n        this.words[this.sigBytes >>> 2] &= 0xffffffff << (32 - (this.sigBytes % 4) * 8);\n        this.words.length = Math.ceil(this.sigBytes / 4);\n    };\n    /**\n     * Creates a copy of this word array.\n     *\n     * @return The clone.\n     *\n     * @example\n     *\n     *     let clone = wordArray.clone();\n     */\n    /**\n     * Creates a copy of this word array.\n     *\n     * \\@example\n     *\n     *     let clone = wordArray.clone();\n     * @return {?} The clone.\n     *\n     */\n    WordArray.prototype.clone = /**\n     * Creates a copy of this word array.\n     *\n     * \\@example\n     *\n     *     let clone = wordArray.clone();\n     * @return {?} The clone.\n     *\n     */\n    function () {\n        return new WordArray(this.words.slice(0), this.sigBytes);\n    };\n    return WordArray;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Latin1 = /** @class */ (function () {\n    function Latin1() {\n    }\n    /**\n     * Converts a word array to a Latin1 string.\n     *\n     * \\@example\n     *\n     *     let latin1String = Latin1.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The Latin1 string.\n     *\n     */\n    Latin1.stringify = /**\n     * Converts a word array to a Latin1 string.\n     *\n     * \\@example\n     *\n     *     let latin1String = Latin1.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The Latin1 string.\n     *\n     */\n    function (wordArray) {\n        // Convert\n        var /** @type {?} */ latin1Chars = [];\n        for (var /** @type {?} */ i = 0; i < wordArray.sigBytes; i++) {\n            var /** @type {?} */ bite = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n            latin1Chars.push(String.fromCharCode(bite));\n        }\n        return latin1Chars.join('');\n    };\n    /**\n     * Converts a Latin1 string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Latin1.parse(latin1String);\n     * @param {?} latin1Str The Latin1 string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    Latin1.parse = /**\n     * Converts a Latin1 string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Latin1.parse(latin1String);\n     * @param {?} latin1Str The Latin1 string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    function (latin1Str) {\n        // Shortcut\n        var /** @type {?} */ latin1StrLength = latin1Str.length;\n        // Convert\n        var /** @type {?} */ words = [];\n        for (var /** @type {?} */ i = 0; i < latin1StrLength; i++) {\n            words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n        }\n        return new WordArray(words, latin1StrLength);\n    };\n    return Latin1;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Utf8 = /** @class */ (function () {\n    function Utf8() {\n    }\n    /**\n     * Converts a word array to a UTF-8 string.\n     *\n     * \\@example\n     *\n     *     let utf8String = Utf8.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The UTF-8 string.\n     *\n     */\n    Utf8.stringify = /**\n     * Converts a word array to a UTF-8 string.\n     *\n     * \\@example\n     *\n     *     let utf8String = Utf8.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The UTF-8 string.\n     *\n     */\n    function (wordArray) {\n        try {\n            return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        }\n        catch (/** @type {?} */ e) {\n            throw new Error('Malformed UTF-8 data');\n        }\n    };\n    /**\n     * Converts a UTF-8 string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Utf8.parse(utf8String);\n     * @param {?} utf8Str The UTF-8 string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    Utf8.parse = /**\n     * Converts a UTF-8 string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Utf8.parse(utf8String);\n     * @param {?} utf8Str The UTF-8 string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    function (utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n    };\n    return Utf8;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar  /**\n * @abstract\n */\nBufferedBlockAlgorithm = /** @class */ (function () {\n    function BufferedBlockAlgorithm(cfg) {\n        this._minBufferSize = 0;\n        this.cfg = Object.assign({\n            blockSize: 1\n        }, cfg);\n        // Initial values\n        this._data = new WordArray();\n        this._nDataBytes = 0;\n    }\n    /**\n     * Resets this block algorithm's data buffer to its initial state.\n     *\n     * @example\n     *\n     *     bufferedBlockAlgorithm.reset();\n     */\n    /**\n     * Resets this block algorithm's data buffer to its initial state.\n     *\n     * \\@example\n     *\n     *     bufferedBlockAlgorithm.reset();\n     * @return {?}\n     */\n    BufferedBlockAlgorithm.prototype.reset = /**\n     * Resets this block algorithm's data buffer to its initial state.\n     *\n     * \\@example\n     *\n     *     bufferedBlockAlgorithm.reset();\n     * @return {?}\n     */\n    function () {\n        // Initial values\n        this._data = new WordArray();\n        this._nDataBytes = 0;\n    };\n    /**\n     * Adds new data to this block algorithm's buffer.\n     *\n     * @param data The data to append. Strings are converted to a WordArray using UTF-8.\n     *\n     * @example\n     *\n     *     bufferedBlockAlgorithm._append('data');\n     *     bufferedBlockAlgorithm._append(wordArray);\n     */\n    /**\n     * Adds new data to this block algorithm's buffer.\n     *\n     * \\@example\n     *\n     *     bufferedBlockAlgorithm._append('data');\n     *     bufferedBlockAlgorithm._append(wordArray);\n     * @param {?} data The data to append. Strings are converted to a WordArray using UTF-8.\n     *\n     * @return {?}\n     */\n    BufferedBlockAlgorithm.prototype._append = /**\n     * Adds new data to this block algorithm's buffer.\n     *\n     * \\@example\n     *\n     *     bufferedBlockAlgorithm._append('data');\n     *     bufferedBlockAlgorithm._append(wordArray);\n     * @param {?} data The data to append. Strings are converted to a WordArray using UTF-8.\n     *\n     * @return {?}\n     */\n    function (data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data === 'string') {\n            data = Utf8.parse(data);\n        }\n        // Append\n        this._data.concat(data);\n        this._nDataBytes += data.sigBytes;\n    };\n    /**\n     * Processes available data blocks.\n     *\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n     *\n     * @param doFlush Whether all blocks and partial blocks should be processed.\n     *\n     * @return The processed data.\n     *\n     * @example\n     *\n     *     let processedData = bufferedBlockAlgorithm._process();\n     *     let processedData = bufferedBlockAlgorithm._process(!!'flush');\n     */\n    /**\n     * Processes available data blocks.\n     *\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n     *\n     * \\@example\n     *\n     *     let processedData = bufferedBlockAlgorithm._process();\n     *     let processedData = bufferedBlockAlgorithm._process(!!'flush');\n     * @param {?=} doFlush Whether all blocks and partial blocks should be processed.\n     *\n     * @return {?} The processed data.\n     *\n     */\n    BufferedBlockAlgorithm.prototype._process = /**\n     * Processes available data blocks.\n     *\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n     *\n     * \\@example\n     *\n     *     let processedData = bufferedBlockAlgorithm._process();\n     *     let processedData = bufferedBlockAlgorithm._process(!!'flush');\n     * @param {?=} doFlush Whether all blocks and partial blocks should be processed.\n     *\n     * @return {?} The processed data.\n     *\n     */\n    function (doFlush) {\n        if (!this.cfg.blockSize) {\n            throw new Error('missing blockSize in config');\n        }\n        // Shortcuts\n        var /** @type {?} */ blockSizeBytes = this.cfg.blockSize * 4;\n        // Count blocks ready\n        var /** @type {?} */ nBlocksReady = this._data.sigBytes / blockSizeBytes;\n        if (doFlush) {\n            // Round up to include partial blocks\n            nBlocksReady = Math.ceil(nBlocksReady);\n        }\n        else {\n            // Round down to include only full blocks,\n            // less the number of blocks that must remain in the buffer\n            nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        }\n        // Count words ready\n        var /** @type {?} */ nWordsReady = nBlocksReady * this.cfg.blockSize;\n        // Count bytes ready\n        var /** @type {?} */ nBytesReady = Math.min(nWordsReady * 4, this._data.sigBytes);\n        // Process blocks\n        var /** @type {?} */ processedWords;\n        if (nWordsReady) {\n            for (var /** @type {?} */ offset = 0; offset < nWordsReady; offset += this.cfg.blockSize) {\n                // Perform concrete-algorithm logic\n                this._doProcessBlock(this._data.words, offset);\n            }\n            // Remove processed words\n            processedWords = this._data.words.splice(0, nWordsReady);\n            this._data.sigBytes -= nBytesReady;\n        }\n        // Return processed words\n        return new WordArray(processedWords, nBytesReady);\n    };\n    /**\n     * Creates a copy of this object.\n     *\n     * @return The clone.\n     *\n     * @example\n     *\n     *     let clone = bufferedBlockAlgorithm.clone();\n     */\n    /**\n     * Creates a copy of this object.\n     *\n     * \\@example\n     *\n     *     let clone = bufferedBlockAlgorithm.clone();\n     * @return {?} The clone.\n     *\n     */\n    BufferedBlockAlgorithm.prototype.clone = /**\n     * Creates a copy of this object.\n     *\n     * \\@example\n     *\n     *     let clone = bufferedBlockAlgorithm.clone();\n     * @return {?} The clone.\n     *\n     */\n    function () {\n        var /** @type {?} */ clone = this.constructor();\n        for (var /** @type {?} */ attr in this) {\n            if (this.hasOwnProperty(attr)) {\n                clone[attr] = this[attr];\n            }\n        }\n        clone._data = this._data.clone();\n        return clone;\n    };\n    return BufferedBlockAlgorithm;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Base = /** @class */ (function () {\n    function Base() {\n    }\n    return Base;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CipherParams = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CipherParams, _super);\n    function CipherParams(cipherParams) {\n        var _this = _super.call(this) || this;\n        _this.ciphertext = cipherParams.ciphertext;\n        _this.key = cipherParams.key;\n        _this.iv = cipherParams.iv;\n        _this.salt = cipherParams.salt;\n        _this.algorithm = cipherParams.algorithm;\n        _this.mode = cipherParams.mode;\n        _this.padding = cipherParams.padding;\n        _this.blockSize = cipherParams.blockSize;\n        _this.formatter = cipherParams.formatter;\n        return _this;\n    }\n    /**\n     * @param {?} additionalParams\n     * @return {?}\n     */\n    CipherParams.prototype.extend = /**\n     * @param {?} additionalParams\n     * @return {?}\n     */\n    function (additionalParams) {\n        if (additionalParams.ciphertext !== undefined) {\n            this.ciphertext = additionalParams.ciphertext;\n        }\n        if (additionalParams.key !== undefined) {\n            this.key = additionalParams.key;\n        }\n        if (additionalParams.iv !== undefined) {\n            this.iv = additionalParams.iv;\n        }\n        if (additionalParams.salt !== undefined) {\n            this.salt = additionalParams.salt;\n        }\n        if (additionalParams.algorithm !== undefined) {\n            this.algorithm = additionalParams.algorithm;\n        }\n        if (additionalParams.mode !== undefined) {\n            this.mode = additionalParams.mode;\n        }\n        if (additionalParams.padding !== undefined) {\n            this.padding = additionalParams.padding;\n        }\n        if (additionalParams.blockSize !== undefined) {\n            this.blockSize = additionalParams.blockSize;\n        }\n        if (additionalParams.formatter !== undefined) {\n            this.formatter = additionalParams.formatter;\n        }\n        return this;\n    };\n    /**\n     * Converts this cipher params object to a string.\n     *\n     * @throws Error If neither the formatter nor the default formatter is set.\n     *\n     * \\@example\n     *\n     *     let string = cipherParams + '';\n     *     let string = cipherParams.toString();\n     *     let string = cipherParams.toString(CryptoJS.format.OpenSSL);\n     * @param {?=} formatter (Optional) The formatting strategy to use.\n     *\n     * @return {?} The stringified cipher params.\n     *\n     */\n    CipherParams.prototype.toString = /**\n     * Converts this cipher params object to a string.\n     *\n     * @throws Error If neither the formatter nor the default formatter is set.\n     *\n     * \\@example\n     *\n     *     let string = cipherParams + '';\n     *     let string = cipherParams.toString();\n     *     let string = cipherParams.toString(CryptoJS.format.OpenSSL);\n     * @param {?=} formatter (Optional) The formatting strategy to use.\n     *\n     * @return {?} The stringified cipher params.\n     *\n     */\n    function (formatter) {\n        if (formatter) {\n            return formatter.stringify(this);\n        }\n        else if (this.formatter) {\n            return this.formatter.stringify(this);\n        }\n        else {\n            throw new Error('cipher needs a formatter to be able to convert the result into a string');\n        }\n    };\n    return CipherParams;\n}(Base));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Base64 = /** @class */ (function () {\n    function Base64() {\n    }\n    /**\n     * Converts a word array to a Base64 string.\n     *\n     * \\@example\n     *\n     *     let base64String = Base64.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The Base64 string.\n     *\n     */\n    Base64.stringify = /**\n     * Converts a word array to a Base64 string.\n     *\n     * \\@example\n     *\n     *     let base64String = Base64.stringify(wordArray);\n     * @param {?} wordArray The word array.\n     *\n     * @return {?} The Base64 string.\n     *\n     */\n    function (wordArray) {\n        // Clamp excess bits\n        wordArray.clamp();\n        // Convert\n        var /** @type {?} */ base64Chars = [];\n        for (var /** @type {?} */ i = 0; i < wordArray.sigBytes; i += 3) {\n            var /** @type {?} */ byte1 = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n            var /** @type {?} */ byte2 = (wordArray.words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n            var /** @type {?} */ byte3 = (wordArray.words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n            var /** @type {?} */ triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n            for (var /** @type {?} */ j = 0; (j < 4) && (i + j * 0.75 < wordArray.sigBytes); j++) {\n                base64Chars.push(this._map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n            }\n        }\n        // Add padding\n        var /** @type {?} */ paddingChar = this._map.charAt(64);\n        if (paddingChar) {\n            while (base64Chars.length % 4) {\n                base64Chars.push(paddingChar);\n            }\n        }\n        return base64Chars.join('');\n    };\n    /**\n     * Converts a Base64 string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Base64.parse(base64String);\n     * @param {?} base64Str The Base64 string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    Base64.parse = /**\n     * Converts a Base64 string to a word array.\n     *\n     * \\@example\n     *\n     *     let wordArray = Base64.parse(base64String);\n     * @param {?} base64Str The Base64 string.\n     *\n     * @return {?} The word array.\n     *\n     */\n    function (base64Str) {\n        // Shortcuts\n        var /** @type {?} */ base64StrLength = base64Str.length;\n        if (this._reverseMap === undefined) {\n            this._reverseMap = [];\n            for (var /** @type {?} */ j = 0; j < this._map.length; j++) {\n                this._reverseMap[this._map.charCodeAt(j)] = j;\n            }\n        }\n        // Ignore padding\n        var /** @type {?} */ paddingChar = this._map.charAt(64);\n        if (paddingChar) {\n            var /** @type {?} */ paddingIndex = base64Str.indexOf(paddingChar);\n            if (paddingIndex !== -1) {\n                base64StrLength = paddingIndex;\n            }\n        }\n        // Convert\n        return this.parseLoop(base64Str, base64StrLength, this._reverseMap);\n    };\n    /**\n     * @param {?} base64Str\n     * @param {?} base64StrLength\n     * @param {?} reverseMap\n     * @return {?}\n     */\n    Base64.parseLoop = /**\n     * @param {?} base64Str\n     * @param {?} base64StrLength\n     * @param {?} reverseMap\n     * @return {?}\n     */\n    function (base64Str, base64StrLength, reverseMap) {\n        var /** @type {?} */ words = [];\n        var /** @type {?} */ nBytes = 0;\n        for (var /** @type {?} */ i = 0; i < base64StrLength; i++) {\n            if (i % 4) {\n                var /** @type {?} */ bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n                var /** @type {?} */ bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n                words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                nBytes++;\n            }\n        }\n        return new WordArray(words, nBytes);\n    };\n    Base64._map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    Base64._reverseMap = undefined;\n    return Base64;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OpenSSL = /** @class */ (function () {\n    function OpenSSL() {\n    }\n    /**\n     * Converts a cipher params object to an OpenSSL-compatible string.\n     *\n     * \\@example\n     *\n     *     let openSSLString = OpenSSLFormatter.stringify(cipherParams);\n     * @param {?} cipherParams The cipher params object.\n     *\n     * @return {?} The OpenSSL-compatible string.\n     *\n     */\n    OpenSSL.stringify = /**\n     * Converts a cipher params object to an OpenSSL-compatible string.\n     *\n     * \\@example\n     *\n     *     let openSSLString = OpenSSLFormatter.stringify(cipherParams);\n     * @param {?} cipherParams The cipher params object.\n     *\n     * @return {?} The OpenSSL-compatible string.\n     *\n     */\n    function (cipherParams) {\n        if (!cipherParams.ciphertext) {\n            throw new Error('missing ciphertext in params');\n        }\n        // Shortcuts\n        var /** @type {?} */ ciphertext = cipherParams.ciphertext;\n        var /** @type {?} */ salt = cipherParams.salt;\n        // Format\n        var /** @type {?} */ wordArray;\n        if (salt) {\n            if (typeof salt === 'string') {\n                throw new Error('salt is expected to be a WordArray');\n            }\n            wordArray = (new WordArray([0x53616c74, 0x65645f5f])).concat(salt).concat(ciphertext);\n        }\n        else {\n            wordArray = ciphertext;\n        }\n        return wordArray.toString(Base64);\n    };\n    /**\n     * Converts an OpenSSL-compatible string to a cipher params object.\n     *\n     * \\@example\n     *\n     *     let cipherParams = OpenSSLFormatter.parse(openSSLString);\n     * @param {?} openSSLStr The OpenSSL-compatible string.\n     *\n     * @return {?} The cipher params object.\n     *\n     */\n    OpenSSL.parse = /**\n     * Converts an OpenSSL-compatible string to a cipher params object.\n     *\n     * \\@example\n     *\n     *     let cipherParams = OpenSSLFormatter.parse(openSSLString);\n     * @param {?} openSSLStr The OpenSSL-compatible string.\n     *\n     * @return {?} The cipher params object.\n     *\n     */\n    function (openSSLStr) {\n        // Parse base64\n        var /** @type {?} */ ciphertext = Base64.parse(openSSLStr);\n        // Test for salt\n        var /** @type {?} */ salt;\n        if (ciphertext.words[0] === 0x53616c74 && ciphertext.words[1] === 0x65645f5f) {\n            // Extract salt\n            salt = new WordArray(ciphertext.words.slice(2, 4));\n            // Remove salt from ciphertext\n            ciphertext.words.splice(0, 4);\n            ciphertext.sigBytes -= 16;\n        }\n        return new CipherParams({ ciphertext: ciphertext, salt: salt });\n    };\n    return OpenSSL;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar SerializableCipher = /** @class */ (function () {\n    function SerializableCipher() {\n    }\n    /**\n     * Encrypts a message.\n     *\n     * \\@example\n     *\n     *     let ciphertextParams = SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n     *     let ciphertextParams = SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n     *     let ciphertextParams = SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, {\n     *       iv: iv,\n     *       format: CryptoJS.format.OpenSSL\n     *     });\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} message The message to encrypt.\n     * @param {?} key The key.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher params object.\n     *\n     */\n    SerializableCipher.encrypt = /**\n     * Encrypts a message.\n     *\n     * \\@example\n     *\n     *     let ciphertextParams = SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n     *     let ciphertextParams = SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n     *     let ciphertextParams = SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, {\n     *       iv: iv,\n     *       format: CryptoJS.format.OpenSSL\n     *     });\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} message The message to encrypt.\n     * @param {?} key The key.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher params object.\n     *\n     */\n    function (cipher, message, key, cfg) {\n        // Apply config defaults\n        var /** @type {?} */ config = Object.assign({}, this.cfg, cfg);\n        // Encrypt\n        var /** @type {?} */ encryptor = cipher.createEncryptor(key, config);\n        var /** @type {?} */ ciphertext = encryptor.finalize(message);\n        // Create and return serializable cipher params\n        return new CipherParams({\n            ciphertext: ciphertext,\n            key: key,\n            iv: encryptor.cfg.iv,\n            algorithm: cipher,\n            mode: (/** @type {?} */ (encryptor.cfg)).mode,\n            padding: (/** @type {?} */ (encryptor.cfg)).padding,\n            blockSize: encryptor.cfg.blockSize,\n            formatter: config.format\n        });\n    };\n    /**\n     * Decrypts serialized ciphertext.\n     *\n     * \\@example\n     *\n     *     let plaintext = SerializableCipher.decrypt(\n     *         AESAlgorithm,\n     *         formattedCiphertext,\n     *         key, {\n     *             iv: iv,\n     *             format: CryptoJS.format.OpenSSL\n     *         }\n     *     );\n     *\n     *     let plaintext = SerializableCipher.decrypt(\n     *         AESAlgorithm,\n     *         ciphertextParams,\n     *         key, {\n     *             iv: iv,\n     *             format: CryptoJS.format.OpenSSL\n     *         }\n     *     );\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} ciphertext The ciphertext to decrypt.\n     * @param {?} key The key.\n     * @param {?=} optionalCfg\n     * @return {?} The plaintext.\n     *\n     */\n    SerializableCipher.decrypt = /**\n     * Decrypts serialized ciphertext.\n     *\n     * \\@example\n     *\n     *     let plaintext = SerializableCipher.decrypt(\n     *         AESAlgorithm,\n     *         formattedCiphertext,\n     *         key, {\n     *             iv: iv,\n     *             format: CryptoJS.format.OpenSSL\n     *         }\n     *     );\n     *\n     *     let plaintext = SerializableCipher.decrypt(\n     *         AESAlgorithm,\n     *         ciphertextParams,\n     *         key, {\n     *             iv: iv,\n     *             format: CryptoJS.format.OpenSSL\n     *         }\n     *     );\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} ciphertext The ciphertext to decrypt.\n     * @param {?} key The key.\n     * @param {?=} optionalCfg\n     * @return {?} The plaintext.\n     *\n     */\n    function (cipher, ciphertext, key, optionalCfg) {\n        // Apply config defaults\n        var /** @type {?} */ cfg = Object.assign({}, this.cfg, optionalCfg);\n        if (!cfg.format) {\n            throw new Error('could not determine format');\n        }\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n        if (!ciphertext.ciphertext) {\n            throw new Error('could not determine ciphertext');\n        }\n        // Decrypt\n        var /** @type {?} */ plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n        return plaintext;\n    };\n    /**\n     * Converts serialized ciphertext to CipherParams,\n     * else assumed CipherParams already and returns ciphertext unchanged.\n     *\n     * \\@example\n     *\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n     * @param {?} ciphertext The ciphertext.\n     * @param {?} format The formatting strategy to use to parse serialized ciphertext.\n     *\n     * @return {?} The unserialized ciphertext.\n     *\n     */\n    SerializableCipher._parse = /**\n     * Converts serialized ciphertext to CipherParams,\n     * else assumed CipherParams already and returns ciphertext unchanged.\n     *\n     * \\@example\n     *\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n     * @param {?} ciphertext The ciphertext.\n     * @param {?} format The formatting strategy to use to parse serialized ciphertext.\n     *\n     * @return {?} The unserialized ciphertext.\n     *\n     */\n    function (ciphertext, format) {\n        if (typeof ciphertext === 'string') {\n            return format.parse(ciphertext);\n        }\n        else {\n            return ciphertext;\n        }\n    };\n    SerializableCipher.cfg = {\n        blockSize: 4,\n        iv: new WordArray([]),\n        format: OpenSSL\n    };\n    return SerializableCipher;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar  /**\n * @abstract\n */\nHasher = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Hasher, _super);\n    function Hasher(cfg) {\n        var _this = \n        // Apply config defaults\n        _super.call(this, Object.assign({\n            blockSize: 512 / 32\n        }, cfg)) || this;\n        // Set initial values\n        // Set initial values\n        _this.reset();\n        return _this;\n    }\n    /**\n     * Creates a shortcut function to a hasher's object interface.\n     *\n     * \\@example\n     *\n     *     let SHA256 = Hasher._createHelper(SHA256);\n     * @param {?} hasher The hasher to create a helper for.\n     *\n     * @return {?} The shortcut function.\n     *\n     */\n    Hasher._createHelper = /**\n     * Creates a shortcut function to a hasher's object interface.\n     *\n     * \\@example\n     *\n     *     let SHA256 = Hasher._createHelper(SHA256);\n     * @param {?} hasher The hasher to create a helper for.\n     *\n     * @return {?} The shortcut function.\n     *\n     */\n    function (hasher) {\n        /**\n         * @param {?} message\n         * @param {?=} cfg\n         * @return {?}\n         */\n        function helper(message, cfg) {\n            var /** @type {?} */ hasherClass = hasher;\n            var /** @type {?} */ hasherInstance = new hasherClass(cfg);\n            return hasherInstance.finalize(message);\n        }\n        return helper;\n    };\n    /**\n     * Updates this hasher with a message.\n     *\n     * @param messageUpdate The message to append.\n     *\n     * @return This hasher.\n     *\n     * @example\n     *\n     *     hasher.update('message');\n     *     hasher.update(wordArray);\n     */\n    /**\n     * Updates this hasher with a message.\n     *\n     * \\@example\n     *\n     *     hasher.update('message');\n     *     hasher.update(wordArray);\n     * @param {?} messageUpdate The message to append.\n     *\n     * @return {?} This hasher.\n     *\n     */\n    Hasher.prototype.update = /**\n     * Updates this hasher with a message.\n     *\n     * \\@example\n     *\n     *     hasher.update('message');\n     *     hasher.update(wordArray);\n     * @param {?} messageUpdate The message to append.\n     *\n     * @return {?} This hasher.\n     *\n     */\n    function (messageUpdate) {\n        // Append\n        this._append(messageUpdate);\n        // Update the hash\n        this._process();\n        // Chainable\n        return this;\n    };\n    /**\n     * Finalizes the hash computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * \\@example\n     *\n     *     let hash = hasher.finalize();\n     *     let hash = hasher.finalize('message');\n     *     let hash = hasher.finalize(wordArray);\n     * @param {?} messageUpdate (Optional) A final message update.\n     *\n     * @return {?} The hash.\n     *\n     */\n    Hasher.prototype.finalize = /**\n     * Finalizes the hash computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * \\@example\n     *\n     *     let hash = hasher.finalize();\n     *     let hash = hasher.finalize('message');\n     *     let hash = hasher.finalize(wordArray);\n     * @param {?} messageUpdate (Optional) A final message update.\n     *\n     * @return {?} The hash.\n     *\n     */\n    function (messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n            this._append(messageUpdate);\n        }\n        // Perform concrete-hasher logic\n        var /** @type {?} */ hash = this._doFinalize();\n        return hash;\n    };\n    return Hasher;\n}(BufferedBlockAlgorithm));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Constants table\nvar /** @type {?} */ T = [];\n// Compute constants\nfor (var /** @type {?} */ i = 0; i < 64; i++) {\n    T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n}\nvar MD5 = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MD5, _super);\n    function MD5() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    MD5.FF = /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    function (a, b, c, d, x, s, t) {\n        var /** @type {?} */ n = a + ((b & c) | (~b & d)) + x + t;\n        return ((n << s) | (n >>> (32 - s))) + b;\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    MD5.GG = /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    function (a, b, c, d, x, s, t) {\n        var /** @type {?} */ n = a + ((b & d) | (c & ~d)) + x + t;\n        return ((n << s) | (n >>> (32 - s))) + b;\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    MD5.HH = /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    function (a, b, c, d, x, s, t) {\n        var /** @type {?} */ n = a + (b ^ c ^ d) + x + t;\n        return ((n << s) | (n >>> (32 - s))) + b;\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    MD5.II = /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @param {?} d\n     * @param {?} x\n     * @param {?} s\n     * @param {?} t\n     * @return {?}\n     */\n    function (a, b, c, d, x, s, t) {\n        var /** @type {?} */ n = a + (c ^ (b | ~d)) + x + t;\n        return ((n << s) | (n >>> (32 - s))) + b;\n    };\n    /**\n     * @return {?}\n     */\n    MD5.prototype.reset = /**\n     * @return {?}\n     */\n    function () {\n        // reset core values\n        _super.prototype.reset.call(this);\n        this._hash = new WordArray([\n            0x67452301, 0xefcdab89,\n            0x98badcfe, 0x10325476\n        ]);\n    };\n    /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    MD5.prototype._doProcessBlock = /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    function (M, offset) {\n        // Swap endian\n        for (var /** @type {?} */ i = 0; i < 16; i++) {\n            // Shortcuts\n            var /** @type {?} */ offset_i = offset + i;\n            var /** @type {?} */ M_offset_i = M[offset_i];\n            M[offset_i] = ((((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |\n                (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00));\n        }\n        // Shortcuts\n        var /** @type {?} */ H = this._hash.words;\n        var /** @type {?} */ M_offset_0 = M[offset + 0];\n        var /** @type {?} */ M_offset_1 = M[offset + 1];\n        var /** @type {?} */ M_offset_2 = M[offset + 2];\n        var /** @type {?} */ M_offset_3 = M[offset + 3];\n        var /** @type {?} */ M_offset_4 = M[offset + 4];\n        var /** @type {?} */ M_offset_5 = M[offset + 5];\n        var /** @type {?} */ M_offset_6 = M[offset + 6];\n        var /** @type {?} */ M_offset_7 = M[offset + 7];\n        var /** @type {?} */ M_offset_8 = M[offset + 8];\n        var /** @type {?} */ M_offset_9 = M[offset + 9];\n        var /** @type {?} */ M_offset_10 = M[offset + 10];\n        var /** @type {?} */ M_offset_11 = M[offset + 11];\n        var /** @type {?} */ M_offset_12 = M[offset + 12];\n        var /** @type {?} */ M_offset_13 = M[offset + 13];\n        var /** @type {?} */ M_offset_14 = M[offset + 14];\n        var /** @type {?} */ M_offset_15 = M[offset + 15];\n        // Working variables\n        var /** @type {?} */ a = H[0];\n        var /** @type {?} */ b = H[1];\n        var /** @type {?} */ c = H[2];\n        var /** @type {?} */ d = H[3];\n        // Computation\n        a = MD5.FF(a, b, c, d, M_offset_0, 7, T[0]);\n        d = MD5.FF(d, a, b, c, M_offset_1, 12, T[1]);\n        c = MD5.FF(c, d, a, b, M_offset_2, 17, T[2]);\n        b = MD5.FF(b, c, d, a, M_offset_3, 22, T[3]);\n        a = MD5.FF(a, b, c, d, M_offset_4, 7, T[4]);\n        d = MD5.FF(d, a, b, c, M_offset_5, 12, T[5]);\n        c = MD5.FF(c, d, a, b, M_offset_6, 17, T[6]);\n        b = MD5.FF(b, c, d, a, M_offset_7, 22, T[7]);\n        a = MD5.FF(a, b, c, d, M_offset_8, 7, T[8]);\n        d = MD5.FF(d, a, b, c, M_offset_9, 12, T[9]);\n        c = MD5.FF(c, d, a, b, M_offset_10, 17, T[10]);\n        b = MD5.FF(b, c, d, a, M_offset_11, 22, T[11]);\n        a = MD5.FF(a, b, c, d, M_offset_12, 7, T[12]);\n        d = MD5.FF(d, a, b, c, M_offset_13, 12, T[13]);\n        c = MD5.FF(c, d, a, b, M_offset_14, 17, T[14]);\n        b = MD5.FF(b, c, d, a, M_offset_15, 22, T[15]);\n        a = MD5.GG(a, b, c, d, M_offset_1, 5, T[16]);\n        d = MD5.GG(d, a, b, c, M_offset_6, 9, T[17]);\n        c = MD5.GG(c, d, a, b, M_offset_11, 14, T[18]);\n        b = MD5.GG(b, c, d, a, M_offset_0, 20, T[19]);\n        a = MD5.GG(a, b, c, d, M_offset_5, 5, T[20]);\n        d = MD5.GG(d, a, b, c, M_offset_10, 9, T[21]);\n        c = MD5.GG(c, d, a, b, M_offset_15, 14, T[22]);\n        b = MD5.GG(b, c, d, a, M_offset_4, 20, T[23]);\n        a = MD5.GG(a, b, c, d, M_offset_9, 5, T[24]);\n        d = MD5.GG(d, a, b, c, M_offset_14, 9, T[25]);\n        c = MD5.GG(c, d, a, b, M_offset_3, 14, T[26]);\n        b = MD5.GG(b, c, d, a, M_offset_8, 20, T[27]);\n        a = MD5.GG(a, b, c, d, M_offset_13, 5, T[28]);\n        d = MD5.GG(d, a, b, c, M_offset_2, 9, T[29]);\n        c = MD5.GG(c, d, a, b, M_offset_7, 14, T[30]);\n        b = MD5.GG(b, c, d, a, M_offset_12, 20, T[31]);\n        a = MD5.HH(a, b, c, d, M_offset_5, 4, T[32]);\n        d = MD5.HH(d, a, b, c, M_offset_8, 11, T[33]);\n        c = MD5.HH(c, d, a, b, M_offset_11, 16, T[34]);\n        b = MD5.HH(b, c, d, a, M_offset_14, 23, T[35]);\n        a = MD5.HH(a, b, c, d, M_offset_1, 4, T[36]);\n        d = MD5.HH(d, a, b, c, M_offset_4, 11, T[37]);\n        c = MD5.HH(c, d, a, b, M_offset_7, 16, T[38]);\n        b = MD5.HH(b, c, d, a, M_offset_10, 23, T[39]);\n        a = MD5.HH(a, b, c, d, M_offset_13, 4, T[40]);\n        d = MD5.HH(d, a, b, c, M_offset_0, 11, T[41]);\n        c = MD5.HH(c, d, a, b, M_offset_3, 16, T[42]);\n        b = MD5.HH(b, c, d, a, M_offset_6, 23, T[43]);\n        a = MD5.HH(a, b, c, d, M_offset_9, 4, T[44]);\n        d = MD5.HH(d, a, b, c, M_offset_12, 11, T[45]);\n        c = MD5.HH(c, d, a, b, M_offset_15, 16, T[46]);\n        b = MD5.HH(b, c, d, a, M_offset_2, 23, T[47]);\n        a = MD5.II(a, b, c, d, M_offset_0, 6, T[48]);\n        d = MD5.II(d, a, b, c, M_offset_7, 10, T[49]);\n        c = MD5.II(c, d, a, b, M_offset_14, 15, T[50]);\n        b = MD5.II(b, c, d, a, M_offset_5, 21, T[51]);\n        a = MD5.II(a, b, c, d, M_offset_12, 6, T[52]);\n        d = MD5.II(d, a, b, c, M_offset_3, 10, T[53]);\n        c = MD5.II(c, d, a, b, M_offset_10, 15, T[54]);\n        b = MD5.II(b, c, d, a, M_offset_1, 21, T[55]);\n        a = MD5.II(a, b, c, d, M_offset_8, 6, T[56]);\n        d = MD5.II(d, a, b, c, M_offset_15, 10, T[57]);\n        c = MD5.II(c, d, a, b, M_offset_6, 15, T[58]);\n        b = MD5.II(b, c, d, a, M_offset_13, 21, T[59]);\n        a = MD5.II(a, b, c, d, M_offset_4, 6, T[60]);\n        d = MD5.II(d, a, b, c, M_offset_11, 10, T[61]);\n        c = MD5.II(c, d, a, b, M_offset_2, 15, T[62]);\n        b = MD5.II(b, c, d, a, M_offset_9, 21, T[63]);\n        // Intermediate hash value\n        H[0] = (H[0] + a) | 0;\n        H[1] = (H[1] + b) | 0;\n        H[2] = (H[2] + c) | 0;\n        H[3] = (H[3] + d) | 0;\n    };\n    /**\n     * @return {?}\n     */\n    MD5.prototype._doFinalize = /**\n     * @return {?}\n     */\n    function () {\n        // Shortcuts\n        var /** @type {?} */ data = this._data;\n        var /** @type {?} */ dataWords = data.words;\n        var /** @type {?} */ nBitsTotal = this._nDataBytes * 8;\n        var /** @type {?} */ nBitsLeft = data.sigBytes * 8;\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n        var /** @type {?} */ nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n        var /** @type {?} */ nBitsTotalL = nBitsTotal;\n        dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = ((((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n            (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00));\n        dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = ((((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n            (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00));\n        data.sigBytes = (dataWords.length + 1) * 4;\n        // Hash final blocks\n        this._process();\n        // Shortcuts\n        var /** @type {?} */ hash = this._hash;\n        var /** @type {?} */ H = hash.words;\n        // Swap endian\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            // Shortcut\n            var /** @type {?} */ H_i = H[i];\n            H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |\n                (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);\n        }\n        // Return final computed hash\n        return hash;\n    };\n    return MD5;\n}(Hasher));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar EvpKDF = /** @class */ (function () {\n    /**\n     * Initializes a newly created key derivation function.\n     *\n     * @param cfg (Optional) The configuration options to use for the derivation.\n     *\n     * @example\n     *\n     *     let kdf = EvpKDF.create();\n     *     let kdf = EvpKDF.create({ keySize: 8 });\n     *     let kdf = EvpKDF.create({ keySize: 8, iterations: 1000 });\n     */\n    function EvpKDF(cfg) {\n        this.cfg = Object.assign({\n            keySize: 128 / 32,\n            hasher: MD5,\n            iterations: 1\n        }, cfg);\n    }\n    /**\n     * Derives a key from a password.\n     *\n     * @param password The password.\n     * @param salt A salt.\n     *\n     * @return The derived key.\n     *\n     * @example\n     *\n     *     let key = kdf.compute(password, salt);\n     */\n    /**\n     * Derives a key from a password.\n     *\n     * \\@example\n     *\n     *     let key = kdf.compute(password, salt);\n     * @param {?} password The password.\n     * @param {?} salt A salt.\n     *\n     * @return {?} The derived key.\n     *\n     */\n    EvpKDF.prototype.compute = /**\n     * Derives a key from a password.\n     *\n     * \\@example\n     *\n     *     let key = kdf.compute(password, salt);\n     * @param {?} password The password.\n     * @param {?} salt A salt.\n     *\n     * @return {?} The derived key.\n     *\n     */\n    function (password, salt) {\n        // Init hasher\n        var /** @type {?} */ hasher = new (/** @type {?} */ (this.cfg.hasher))();\n        // Initial values\n        var /** @type {?} */ derivedKey = new WordArray();\n        // Generate key\n        var /** @type {?} */ block;\n        while (derivedKey.words.length < this.cfg.keySize) {\n            if (block) {\n                hasher.update(block);\n            }\n            block = hasher.update(password).finalize(salt);\n            hasher.reset();\n            // Iterations\n            for (var /** @type {?} */ i = 1; i < this.cfg.iterations; i++) {\n                block = hasher.finalize(block);\n                hasher.reset();\n            }\n            derivedKey.concat(block);\n        }\n        derivedKey.sigBytes = this.cfg.keySize * 4;\n        return derivedKey;\n    };\n    return EvpKDF;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OpenSSLKdf = /** @class */ (function () {\n    function OpenSSLKdf() {\n    }\n    /**\n     * Derives a key and IV from a password.\n     *\n     * \\@example\n     *\n     *     let derivedParams = OpenSSL.execute('Password', 256/32, 128/32);\n     *     let derivedParams = OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n     * @param {?} password The password to derive from.\n     * @param {?} keySize The size in words of the key to generate.\n     * @param {?} ivSize The size in words of the IV to generate.\n     * @param {?=} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n     *\n     * @return {?} A cipher params object with the key, IV, and salt.\n     *\n     */\n    OpenSSLKdf.execute = /**\n     * Derives a key and IV from a password.\n     *\n     * \\@example\n     *\n     *     let derivedParams = OpenSSL.execute('Password', 256/32, 128/32);\n     *     let derivedParams = OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n     * @param {?} password The password to derive from.\n     * @param {?} keySize The size in words of the key to generate.\n     * @param {?} ivSize The size in words of the IV to generate.\n     * @param {?=} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n     *\n     * @return {?} A cipher params object with the key, IV, and salt.\n     *\n     */\n    function (password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n            salt = WordArray.random(64 / 8);\n        }\n        // Derive key and IV\n        var /** @type {?} */ key = (new EvpKDF({ keySize: keySize + ivSize })).compute(password, salt);\n        // Separate key and IV\n        var /** @type {?} */ iv = new WordArray(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4;\n        // Return params\n        return new CipherParams({ key: key, iv: iv, salt: salt });\n    };\n    return OpenSSLKdf;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PasswordBasedCipher = /** @class */ (function () {\n    function PasswordBasedCipher() {\n    }\n    /**\n     * Encrypts a message using a password.\n     *\n     * \\@example\n     *\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(AES, message, 'password');\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(AES, message, 'password', { format: OpenSSL });\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} message The message to encrypt.\n     * @param {?} password The password.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher params object.\n     *\n     */\n    PasswordBasedCipher.encrypt = /**\n     * Encrypts a message using a password.\n     *\n     * \\@example\n     *\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(AES, message, 'password');\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(AES, message, 'password', { format: OpenSSL });\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} message The message to encrypt.\n     * @param {?} password The password.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher params object.\n     *\n     */\n    function (cipher, message, password, cfg) {\n        // Apply config defaults\n        var /** @type {?} */ config = Object.assign({}, this.cfg, cfg);\n        // Check if we have a kdf\n        if (config.kdf === undefined) {\n            throw new Error('missing kdf in config');\n        }\n        // Derive key and other params\n        var /** @type {?} */ derivedParams = config.kdf.execute(password, cipher.keySize, cipher.ivSize);\n        // Check if we have an IV\n        if (derivedParams.iv !== undefined) {\n            // Add IV to config\n            config.iv = derivedParams.iv;\n        }\n        // Encrypt\n        var /** @type {?} */ ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, config);\n        // Mix in derived params\n        return ciphertext.extend(derivedParams);\n    };\n    /**\n     * Decrypts serialized ciphertext using a password.\n     *\n     * \\@example\n     *\n     *     var plaintext = PasswordBasedCipher.decrypt(AES, formattedCiphertext, 'password', { format: OpenSSL });\n     *     var plaintext = PasswordBasedCipher.decrypt(AES, ciphertextParams, 'password', { format: OpenSSL });\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} ciphertext The ciphertext to decrypt.\n     * @param {?} password The password.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} The plaintext.\n     *\n     */\n    PasswordBasedCipher.decrypt = /**\n     * Decrypts serialized ciphertext using a password.\n     *\n     * \\@example\n     *\n     *     var plaintext = PasswordBasedCipher.decrypt(AES, formattedCiphertext, 'password', { format: OpenSSL });\n     *     var plaintext = PasswordBasedCipher.decrypt(AES, ciphertextParams, 'password', { format: OpenSSL });\n     * @param {?} cipher The cipher algorithm to use.\n     * @param {?} ciphertext The ciphertext to decrypt.\n     * @param {?} password The password.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} The plaintext.\n     *\n     */\n    function (cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        var /** @type {?} */ config = Object.assign({}, this.cfg, cfg);\n        // Check if we have a kdf\n        if (config.format === undefined) {\n            throw new Error('missing format in config');\n        }\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, config.format);\n        // Check if we have a kdf\n        if (config.kdf === undefined) {\n            throw new Error('the key derivation function must be set');\n        }\n        // Derive key and other params\n        var /** @type {?} */ derivedParams = config.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n        // Check if we have an IV\n        if (derivedParams.iv !== undefined) {\n            // Add IV to config\n            config.iv = derivedParams.iv;\n        }\n        // Decrypt\n        var /** @type {?} */ plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, config);\n        return plaintext;\n    };\n    /**\n     * Converts serialized ciphertext to CipherParams,\n     * else assumed CipherParams already and returns ciphertext unchanged.\n     *\n     * \\@example\n     *\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n     * @param {?} ciphertext The ciphertext.\n     * @param {?} format The formatting strategy to use to parse serialized ciphertext.\n     *\n     * @return {?} The unserialized ciphertext.\n     *\n     */\n    PasswordBasedCipher._parse = /**\n     * Converts serialized ciphertext to CipherParams,\n     * else assumed CipherParams already and returns ciphertext unchanged.\n     *\n     * \\@example\n     *\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n     * @param {?} ciphertext The ciphertext.\n     * @param {?} format The formatting strategy to use to parse serialized ciphertext.\n     *\n     * @return {?} The unserialized ciphertext.\n     *\n     */\n    function (ciphertext, format) {\n        if (typeof ciphertext === 'string') {\n            return format.parse(ciphertext);\n        }\n        else {\n            return ciphertext;\n        }\n    };\n    PasswordBasedCipher.cfg = {\n        blockSize: 4,\n        iv: new WordArray([]),\n        format: OpenSSL,\n        kdf: OpenSSLKdf\n    };\n    return PasswordBasedCipher;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar Cipher = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Cipher, _super);\n    function Cipher(xformMode, key, cfg) {\n        var _this = \n        // Apply config defaults\n        _super.call(this, Object.assign({\n            blockSize: 1\n        }, cfg)) || this;\n        // Store transform mode and key\n        // Store transform mode and key\n        _this._xformMode = xformMode;\n        _this._key = key;\n        // Set initial values\n        // Set initial values\n        _this.reset();\n        return _this;\n    }\n    /**\n     * Creates this cipher in encryption mode.\n     *\n     * \\@example\n     *\n     *     let cipher = AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n     * @param {?} key The key.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher instance.\n     *\n     */\n    Cipher.createEncryptor = /**\n     * Creates this cipher in encryption mode.\n     *\n     * \\@example\n     *\n     *     let cipher = AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n     * @param {?} key The key.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher instance.\n     *\n     */\n    function (key, cfg) {\n        // workaround for typescript not being able to create a abstract creator function directly\n        var /** @type {?} */ thisClass = this;\n        return new thisClass(this._ENC_XFORM_MODE, key, cfg);\n    };\n    /**\n     * Creates this cipher in decryption mode.\n     *\n     * \\@example\n     *\n     *     let cipher = AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n     * @param {?} key The key.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher instance.\n     *\n     */\n    Cipher.createDecryptor = /**\n     * Creates this cipher in decryption mode.\n     *\n     * \\@example\n     *\n     *     let cipher = AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n     * @param {?} key The key.\n     * @param {?=} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {?} A cipher instance.\n     *\n     */\n    function (key, cfg) {\n        // workaround for typescript not being able to create a abstract creator function directly\n        var /** @type {?} */ thisClass = this;\n        return new thisClass(this._DEC_XFORM_MODE, key, cfg);\n    };\n    /**\n     * Creates shortcut functions to a cipher's object interface.\n     *\n     * \\@example\n     *\n     *     let AES = Cipher._createHelper(AESAlgorithm);\n     * @param {?} cipher The cipher to create a helper for.\n     *\n     * @return {?} An object with encrypt and decrypt shortcut functions.\n     *\n     */\n    Cipher._createHelper = /**\n     * Creates shortcut functions to a cipher's object interface.\n     *\n     * \\@example\n     *\n     *     let AES = Cipher._createHelper(AESAlgorithm);\n     * @param {?} cipher The cipher to create a helper for.\n     *\n     * @return {?} An object with encrypt and decrypt shortcut functions.\n     *\n     */\n    function (cipher) {\n        /**\n         * @param {?} message\n         * @param {?} key\n         * @param {?=} cfg\n         * @return {?}\n         */\n        function encrypt(message, key, cfg) {\n            if (typeof key === 'string') {\n                return PasswordBasedCipher.encrypt(cipher, message, key, cfg);\n            }\n            else {\n                return SerializableCipher.encrypt(cipher, message, key, cfg);\n            }\n        }\n        /**\n         * @param {?} ciphertext\n         * @param {?} key\n         * @param {?=} cfg\n         * @return {?}\n         */\n        function decrypt(ciphertext, key, cfg) {\n            if (typeof key === 'string') {\n                return PasswordBasedCipher.decrypt(cipher, ciphertext, key, cfg);\n            }\n            else {\n                return SerializableCipher.decrypt(cipher, ciphertext, key, cfg);\n            }\n        }\n        return {\n            encrypt: encrypt,\n            decrypt: decrypt\n        };\n    };\n    /**\n     * Adds data to be encrypted or decrypted.\n     *\n     * \\@example\n     *\n     *     let encrypted = cipher.process('data');\n     *     let encrypted = cipher.process(wordArray);\n     * @param {?} dataUpdate The data to encrypt or decrypt.\n     *\n     * @return {?} The data after processing.\n     *\n     */\n    Cipher.prototype.process = /**\n     * Adds data to be encrypted or decrypted.\n     *\n     * \\@example\n     *\n     *     let encrypted = cipher.process('data');\n     *     let encrypted = cipher.process(wordArray);\n     * @param {?} dataUpdate The data to encrypt or decrypt.\n     *\n     * @return {?} The data after processing.\n     *\n     */\n    function (dataUpdate) {\n        // Append\n        this._append(dataUpdate);\n        // Process available blocks\n        return this._process();\n    };\n    /**\n     * Finalizes the encryption or decryption process.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * \\@example\n     *\n     *     var encrypted = cipher.finalize();\n     *     var encrypted = cipher.finalize('data');\n     *     var encrypted = cipher.finalize(wordArray);\n     * @param {?=} dataUpdate The final data to encrypt or decrypt.\n     *\n     * @return {?} The data after final processing.\n     *\n     */\n    Cipher.prototype.finalize = /**\n     * Finalizes the encryption or decryption process.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * \\@example\n     *\n     *     var encrypted = cipher.finalize();\n     *     var encrypted = cipher.finalize('data');\n     *     var encrypted = cipher.finalize(wordArray);\n     * @param {?=} dataUpdate The final data to encrypt or decrypt.\n     *\n     * @return {?} The data after final processing.\n     *\n     */\n    function (dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n            this._append(dataUpdate);\n        }\n        // Perform concrete-cipher logic\n        var /** @type {?} */ finalProcessedData = this._doFinalize();\n        return finalProcessedData;\n    };\n    /**\n     * A constant representing encryption mode.\n     */\n    Cipher._ENC_XFORM_MODE = 1;\n    /**\n     * A constant representing decryption mode.\n     */\n    Cipher._DEC_XFORM_MODE = 2;\n    /**\n     * This cipher's key size. Default: 4 (128 bits / 32 Bits)\n     */\n    Cipher.keySize = 4;\n    /**\n     * This cipher's IV size. Default: 4 (128 bits / 32 Bits)\n     */\n    Cipher.ivSize = 4;\n    return Cipher;\n}(BufferedBlockAlgorithm));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nBlockCipherModeAlgorithm = /** @class */ (function () {\n    function BlockCipherModeAlgorithm(cipher, iv) {\n        this.init(cipher, iv);\n    }\n    /**\n     * Initializes a newly created mode.\n     *\n     * \\@example\n     *\n     *     var mode = CBC.Encryptor.create(cipher, iv.words);\n     * @param {?} cipher A block cipher instance.\n     * @param {?=} iv The IV words.\n     *\n     * @return {?}\n     */\n    BlockCipherModeAlgorithm.prototype.init = /**\n     * Initializes a newly created mode.\n     *\n     * \\@example\n     *\n     *     var mode = CBC.Encryptor.create(cipher, iv.words);\n     * @param {?} cipher A block cipher instance.\n     * @param {?=} iv The IV words.\n     *\n     * @return {?}\n     */\n    function (cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n    };\n    return BlockCipherModeAlgorithm;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar BlockCipherMode = /** @class */ (function () {\n    function BlockCipherMode() {\n    }\n    /**\n     * Creates this mode for encryption.\n     *\n     * \\@example\n     *\n     *     var mode = CBC.createEncryptor(cipher, iv.words);\n     * @param {?} cipher A block cipher instance.\n     * @param {?} iv The IV words.\n     *\n     * @return {?}\n     */\n    BlockCipherMode.createEncryptor = /**\n     * Creates this mode for encryption.\n     *\n     * \\@example\n     *\n     *     var mode = CBC.createEncryptor(cipher, iv.words);\n     * @param {?} cipher A block cipher instance.\n     * @param {?} iv The IV words.\n     *\n     * @return {?}\n     */\n    function (cipher, iv) {\n        // workaround for typescript not being able to create a abstract creator function directly\n        var /** @type {?} */ encryptorClass = this.Encryptor;\n        return new encryptorClass(cipher, iv);\n    };\n    /**\n     * Creates this mode for decryption.\n     *\n     * \\@example\n     *\n     *     var mode = CBC.createDecryptor(cipher, iv.words);\n     * @param {?} cipher A block cipher instance.\n     * @param {?} iv The IV words.\n     *\n     * @return {?}\n     */\n    BlockCipherMode.createDecryptor = /**\n     * Creates this mode for decryption.\n     *\n     * \\@example\n     *\n     *     var mode = CBC.createDecryptor(cipher, iv.words);\n     * @param {?} cipher A block cipher instance.\n     * @param {?} iv The IV words.\n     *\n     * @return {?}\n     */\n    function (cipher, iv) {\n        // workaround for typescript not being able to create a abstract creator function directly\n        var /** @type {?} */ decryptorClass = this.Decryptor;\n        return new decryptorClass(cipher, iv);\n    };\n    BlockCipherMode.Encryptor = BlockCipherModeAlgorithm;\n    BlockCipherMode.Decryptor = BlockCipherModeAlgorithm;\n    return BlockCipherMode;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CBCEncryptor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CBCEncryptor, _super);\n    function CBCEncryptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    CBCEncryptor.prototype.processBlock = /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    function (words, offset) {\n        // Check if we have a blockSize\n        if (this._cipher.cfg.blockSize === undefined) {\n            throw new Error('missing blockSize in cipher config');\n        }\n        // XOR and encrypt\n        this.xorBlock(words, offset, this._cipher.cfg.blockSize);\n        this._cipher.encryptBlock(words, offset);\n        // Remember this block to use with next block\n        this._prevBlock = words.slice(offset, offset + this._cipher.cfg.blockSize);\n    };\n    /**\n     * @param {?} words\n     * @param {?} offset\n     * @param {?} blockSize\n     * @return {?}\n     */\n    CBCEncryptor.prototype.xorBlock = /**\n     * @param {?} words\n     * @param {?} offset\n     * @param {?} blockSize\n     * @return {?}\n     */\n    function (words, offset, blockSize) {\n        // Choose mixing block\n        var /** @type {?} */ block;\n        if (this._iv) {\n            block = this._iv;\n            // Remove IV for subsequent blocks\n            this._iv = undefined;\n        }\n        else {\n            block = this._prevBlock;\n        }\n        // block should never be undefined but we want to make typescript happy\n        if (block !== undefined) {\n            // XOR blocks\n            for (var /** @type {?} */ i = 0; i < blockSize; i++) {\n                words[offset + i] ^= block[i];\n            }\n        }\n    };\n    return CBCEncryptor;\n}(BlockCipherModeAlgorithm));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CBCDecryptor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CBCDecryptor, _super);\n    function CBCDecryptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    CBCDecryptor.prototype.processBlock = /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    function (words, offset) {\n        // Check if we have a blockSize\n        if (this._cipher.cfg.blockSize === undefined) {\n            throw new Error('missing blockSize in cipher config');\n        }\n        // Remember this block to use with next block\n        var /** @type {?} */ thisBlock = words.slice(offset, offset + this._cipher.cfg.blockSize);\n        // Decrypt and XOR\n        this._cipher.decryptBlock(words, offset);\n        this.xorBlock(words, offset, this._cipher.cfg.blockSize);\n        // This block becomes the previous block\n        this._prevBlock = thisBlock;\n    };\n    /**\n     * @param {?} words\n     * @param {?} offset\n     * @param {?} blockSize\n     * @return {?}\n     */\n    CBCDecryptor.prototype.xorBlock = /**\n     * @param {?} words\n     * @param {?} offset\n     * @param {?} blockSize\n     * @return {?}\n     */\n    function (words, offset, blockSize) {\n        // Choose mixing block\n        var /** @type {?} */ block;\n        if (this._iv) {\n            block = this._iv;\n            // Remove IV for subsequent blocks\n            this._iv = undefined;\n        }\n        else {\n            block = this._prevBlock;\n        }\n        // block should never be undefined but we want to make typescript happy\n        if (block !== undefined) {\n            // XOR blocks\n            for (var /** @type {?} */ i = 0; i < blockSize; i++) {\n                words[offset + i] ^= block[i];\n            }\n        }\n    };\n    return CBCDecryptor;\n}(BlockCipherModeAlgorithm));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Cipher Block Chaining mode.\n * @abstract\n */\nvar CBC = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CBC, _super);\n    function CBC() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CBC.Encryptor = CBCEncryptor;\n    CBC.Decryptor = CBCDecryptor;\n    return CBC;\n}(BlockCipherMode));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PKCS7 = /** @class */ (function () {\n    function PKCS7() {\n    }\n    /**\n     * Pads data using the algorithm defined in PKCS #5/7.\n     *\n     * \\@example\n     *\n     *     PKCS7.pad(wordArray, 4);\n     * @param {?} data The data to pad.\n     * @param {?} blockSize The multiple that the data should be padded to.\n     *\n     * @return {?}\n     */\n    PKCS7.pad = /**\n     * Pads data using the algorithm defined in PKCS #5/7.\n     *\n     * \\@example\n     *\n     *     PKCS7.pad(wordArray, 4);\n     * @param {?} data The data to pad.\n     * @param {?} blockSize The multiple that the data should be padded to.\n     *\n     * @return {?}\n     */\n    function (data, blockSize) {\n        // Shortcut\n        var /** @type {?} */ blockSizeBytes = blockSize * 4;\n        // Count padding bytes\n        var /** @type {?} */ nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n        // Create padding word\n        var /** @type {?} */ paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n        // Create padding\n        var /** @type {?} */ paddingWords = [];\n        for (var /** @type {?} */ i = 0; i < nPaddingBytes; i += 4) {\n            paddingWords.push(paddingWord);\n        }\n        var /** @type {?} */ padding = new WordArray(paddingWords, nPaddingBytes);\n        // Add padding\n        data.concat(padding);\n    };\n    /**\n     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n     *\n     * \\@example\n     *\n     *     PKCS7.unpad(wordArray);\n     * @param {?} data The data to unpad.\n     *\n     * @return {?}\n     */\n    PKCS7.unpad = /**\n     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n     *\n     * \\@example\n     *\n     *     PKCS7.unpad(wordArray);\n     * @param {?} data The data to unpad.\n     *\n     * @return {?}\n     */\n    function (data) {\n        // Get number of padding bytes from last byte\n        var /** @type {?} */ nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n    };\n    return PKCS7;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar  /**\n * @abstract\n */\nBlockCipher = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(BlockCipher, _super);\n    function BlockCipher(xformMode, key, cfg) {\n        return _super.call(this, xformMode, key, Object.assign({\n            // default: 128 / 32\n            blockSize: 4,\n            mode: CBC,\n            padding: PKCS7\n        }, cfg)) || this;\n    }\n    /**\n     * @return {?}\n     */\n    BlockCipher.prototype.reset = /**\n     * @return {?}\n     */\n    function () {\n        // Reset cipher\n        _super.prototype.reset.call(this);\n        // Check if we have a blockSize\n        if (this.cfg.mode === undefined) {\n            throw new Error('missing mode in config');\n        }\n        // Reset block mode\n        var /** @type {?} */ modeCreator;\n        if (this._xformMode === (/** @type {?} */ (this.constructor))._ENC_XFORM_MODE) {\n            modeCreator = this.cfg.mode.createEncryptor;\n        }\n        else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n            modeCreator = this.cfg.mode.createDecryptor;\n            // Keep at least one block in the buffer for unpadding\n            this._minBufferSize = 1;\n        }\n        if (this._mode && this._mode.__creator === modeCreator) {\n            this._mode.init(this, this.cfg.iv && this.cfg.iv.words);\n        }\n        else {\n            this._mode = modeCreator.call(this.cfg.mode, this, this.cfg.iv && this.cfg.iv.words);\n            this._mode.__creator = modeCreator;\n        }\n    };\n    /**\n     * @param {?} words\n     * @param {?} offset\n     * @return {?}\n     */\n    BlockCipher.prototype._doProcessBlock = /**\n     * @param {?} words\n     * @param {?} offset\n     * @return {?}\n     */\n    function (words, offset) {\n        this._mode.processBlock(words, offset);\n    };\n    /**\n     * @return {?}\n     */\n    BlockCipher.prototype._doFinalize = /**\n     * @return {?}\n     */\n    function () {\n        // Check if we have a padding strategy\n        if (this.cfg.padding === undefined) {\n            throw new Error('missing padding in config');\n        }\n        // Finalize\n        var /** @type {?} */ finalProcessedBlocks;\n        if (this._xformMode === (/** @type {?} */ (this.constructor))._ENC_XFORM_MODE) {\n            // Check if we have a blockSize\n            if (this.cfg.blockSize === undefined) {\n                throw new Error('missing blockSize in config');\n            }\n            // Pad data\n            this.cfg.padding.pad(this._data, this.cfg.blockSize);\n            // Process final blocks\n            finalProcessedBlocks = this._process(!!'flush');\n        }\n        else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n            // Process final blocks\n            finalProcessedBlocks = this._process(!!'flush');\n            // Unpad data\n            this.cfg.padding.unpad(finalProcessedBlocks);\n        }\n        return finalProcessedBlocks;\n    };\n    return BlockCipher;\n}(Cipher));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Define lookup tables\nvar /** @type {?} */ SBOX = [];\nvar /** @type {?} */ INV_SBOX = [];\nvar /** @type {?} */ SUB_MIX_0 = [];\nvar /** @type {?} */ SUB_MIX_1 = [];\nvar /** @type {?} */ SUB_MIX_2 = [];\nvar /** @type {?} */ SUB_MIX_3 = [];\nvar /** @type {?} */ INV_SUB_MIX_0 = [];\nvar /** @type {?} */ INV_SUB_MIX_1 = [];\nvar /** @type {?} */ INV_SUB_MIX_2 = [];\nvar /** @type {?} */ INV_SUB_MIX_3 = [];\n// Compute lookup tables\n(function () {\n    // Compute double table\n    var /** @type {?} */ d = [];\n    for (var /** @type {?} */ i = 0; i < 256; i++) {\n        if (i < 128) {\n            d[i] = i << 1;\n        }\n        else {\n            d[i] = (i << 1) ^ 0x11b;\n        }\n    }\n    // Walk GF(2^8)\n    var /** @type {?} */ x = 0;\n    var /** @type {?} */ xi = 0;\n    for (var /** @type {?} */ i = 0; i < 256; i++) {\n        // Compute sbox\n        var /** @type {?} */ sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n        // Compute multiplication\n        var /** @type {?} */ x2 = d[x];\n        var /** @type {?} */ x4 = d[x2];\n        var /** @type {?} */ x8 = d[x4];\n        // Compute sub bytes, mix columns tables\n        var /** @type {?} */ t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n        SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n        SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n        SUB_MIX_2[x] = (t << 8) | (t >>> 24);\n        SUB_MIX_3[x] = t;\n        // Compute inv sub bytes, inv mix columns tables\n        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n        INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n        INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n        INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);\n        INV_SUB_MIX_3[sx] = t;\n        // Compute next counter\n        if (!x) {\n            x = xi = 1;\n        }\n        else {\n            x = x2 ^ d[d[d[x8 ^ x2]]];\n            xi ^= d[d[xi]];\n        }\n    }\n}());\n// Precomputed Rcon lookup\nvar /** @type {?} */ RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\nvar AES = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AES, _super);\n    function AES(xformMode, key, cfg) {\n        return _super.call(this, xformMode, key, cfg) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AES.prototype.reset = /**\n     * @return {?}\n     */\n    function () {\n        // reset core values\n        _super.prototype.reset.call(this);\n        // Skip reset of nRounds has been set before and key did not change\n        if (this._nRounds && this._keyPriorReset === this._key) {\n            return;\n        }\n        // Shortcuts\n        var /** @type {?} */ key = this._keyPriorReset = this._key;\n        var /** @type {?} */ keyWords = key.words;\n        var /** @type {?} */ keySize = key.sigBytes / 4;\n        // Compute number of rounds\n        var /** @type {?} */ nRounds = this._nRounds = keySize + 6;\n        // Compute number of key schedule rows\n        var /** @type {?} */ ksRows = (nRounds + 1) * 4;\n        // Compute key schedule\n        var /** @type {?} */ keySchedule = this._keySchedule = [];\n        for (var /** @type {?} */ ksRow = 0; ksRow < ksRows; ksRow++) {\n            if (ksRow < keySize) {\n                keySchedule[ksRow] = keyWords[ksRow];\n            }\n            else {\n                var /** @type {?} */ t = keySchedule[ksRow - 1];\n                if (!(ksRow % keySize)) {\n                    // Rot word\n                    t = (t << 8) | (t >>> 24);\n                    // Sub word\n                    t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n                    // Mix Rcon\n                    t ^= RCON[(ksRow / keySize) | 0] << 24;\n                }\n                else if (keySize > 6 && ksRow % keySize === 4) {\n                    // Sub word\n                    t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n                }\n                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n            }\n        }\n        // Compute inv key schedule\n        var /** @type {?} */ invKeySchedule = this._invKeySchedule = [];\n        for (var /** @type {?} */ invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n            var /** @type {?} */ ksRow = ksRows - invKsRow;\n            var /** @type {?} */ t = void 0;\n            if (invKsRow % 4) {\n                t = keySchedule[ksRow];\n            }\n            else {\n                t = keySchedule[ksRow - 4];\n            }\n            if (invKsRow < 4 || ksRow <= 4) {\n                invKeySchedule[invKsRow] = t;\n            }\n            else {\n                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n                    INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n            }\n        }\n    };\n    /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    AES.prototype.encryptBlock = /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    function (M, offset) {\n        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n    };\n    /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    AES.prototype.decryptBlock = /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    function (M, offset) {\n        // Swap 2nd and 4th rows\n        var /** @type {?} */ t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n        // Inv swap 2nd and 4th rows\n        t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n    };\n    /**\n     * @param {?} M\n     * @param {?} offset\n     * @param {?} keySchedule\n     * @param {?} sub_mix_0\n     * @param {?} sub_mix_1\n     * @param {?} sub_mix_2\n     * @param {?} sub_mix_3\n     * @param {?} sbox\n     * @return {?}\n     */\n    AES.prototype._doCryptBlock = /**\n     * @param {?} M\n     * @param {?} offset\n     * @param {?} keySchedule\n     * @param {?} sub_mix_0\n     * @param {?} sub_mix_1\n     * @param {?} sub_mix_2\n     * @param {?} sub_mix_3\n     * @param {?} sbox\n     * @return {?}\n     */\n    function (M, offset, keySchedule, sub_mix_0, sub_mix_1, sub_mix_2, sub_mix_3, sbox) {\n        // Get input, add round key\n        var /** @type {?} */ s0 = M[offset] ^ keySchedule[0];\n        var /** @type {?} */ s1 = M[offset + 1] ^ keySchedule[1];\n        var /** @type {?} */ s2 = M[offset + 2] ^ keySchedule[2];\n        var /** @type {?} */ s3 = M[offset + 3] ^ keySchedule[3];\n        // Key schedule row counter\n        var /** @type {?} */ ksRow = 4;\n        // Rounds\n        for (var /** @type {?} */ round = 1; round < this._nRounds; round++) {\n            // Shift rows, sub bytes, mix columns, add round key\n            var /** @type {?} */ t0 = sub_mix_0[s0 >>> 24] ^ sub_mix_1[(s1 >>> 16) & 0xff] ^ sub_mix_2[(s2 >>> 8) & 0xff] ^ sub_mix_3[s3 & 0xff] ^\n                keySchedule[ksRow++];\n            var /** @type {?} */ t1 = sub_mix_0[s1 >>> 24] ^ sub_mix_1[(s2 >>> 16) & 0xff] ^ sub_mix_2[(s3 >>> 8) & 0xff] ^ sub_mix_3[s0 & 0xff] ^\n                keySchedule[ksRow++];\n            var /** @type {?} */ t2 = sub_mix_0[s2 >>> 24] ^ sub_mix_1[(s3 >>> 16) & 0xff] ^ sub_mix_2[(s0 >>> 8) & 0xff] ^ sub_mix_3[s1 & 0xff] ^\n                keySchedule[ksRow++];\n            var /** @type {?} */ t3 = sub_mix_0[s3 >>> 24] ^ sub_mix_1[(s0 >>> 16) & 0xff] ^ sub_mix_2[(s1 >>> 8) & 0xff] ^ sub_mix_3[s2 & 0xff] ^\n                keySchedule[ksRow++];\n            // Update state\n            s0 = t0;\n            s1 = t1;\n            s2 = t2;\n            s3 = t3;\n        }\n        // Shift rows, sub bytes, add round key\n        var /** @type {?} */ t0g = ((sbox[s0 >>> 24] << 24) | (sbox[(s1 >>> 16) & 0xff] << 16) | (sbox[(s2 >>> 8) & 0xff] << 8) | sbox[s3 & 0xff]) ^\n            keySchedule[ksRow++];\n        var /** @type {?} */ t1g = ((sbox[s1 >>> 24] << 24) | (sbox[(s2 >>> 16) & 0xff] << 16) | (sbox[(s3 >>> 8) & 0xff] << 8) | sbox[s0 & 0xff]) ^\n            keySchedule[ksRow++];\n        var /** @type {?} */ t2g = ((sbox[s2 >>> 24] << 24) | (sbox[(s3 >>> 16) & 0xff] << 16) | (sbox[(s0 >>> 8) & 0xff] << 8) | sbox[s1 & 0xff]) ^\n            keySchedule[ksRow++];\n        var /** @type {?} */ t3g = ((sbox[s3 >>> 24] << 24) | (sbox[(s0 >>> 16) & 0xff] << 16) | (sbox[(s1 >>> 8) & 0xff] << 8) | sbox[s2 & 0xff]) ^\n            keySchedule[ksRow++];\n        // Set output\n        M[offset] = t0g;\n        M[offset + 1] = t1g;\n        M[offset + 2] = t2g;\n        M[offset + 3] = t3g;\n    };\n    AES.keySize = 8;\n    return AES;\n}(BlockCipher));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Initialization and round constants tables\nvar /** @type {?} */ H = [];\nvar /** @type {?} */ K = [];\n// Reusable object\nvar /** @type {?} */ W = [];\nvar SHA256 = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SHA256, _super);\n    function SHA256() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    SHA256.prototype.reset = /**\n     * @return {?}\n     */\n    function () {\n        // reset core values\n        _super.prototype.reset.call(this);\n        this._hash = new WordArray(H.slice(0));\n    };\n    /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    SHA256.prototype._doProcessBlock = /**\n     * @param {?} M\n     * @param {?} offset\n     * @return {?}\n     */\n    function (M, offset) {\n        // Shortcut\n        var /** @type {?} */ Hl = this._hash.words;\n        // Working variables\n        var /** @type {?} */ a = Hl[0];\n        var /** @type {?} */ b = Hl[1];\n        var /** @type {?} */ c = Hl[2];\n        var /** @type {?} */ d = Hl[3];\n        var /** @type {?} */ e = Hl[4];\n        var /** @type {?} */ f = Hl[5];\n        var /** @type {?} */ g = Hl[6];\n        var /** @type {?} */ h = Hl[7];\n        // Computation\n        for (var /** @type {?} */ i = 0; i < 64; i++) {\n            if (i < 16) {\n                W[i] = M[offset + i] | 0;\n            }\n            else {\n                var /** @type {?} */ gamma0x = W[i - 15];\n                var /** @type {?} */ gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^\n                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n                    (gamma0x >>> 3);\n                var /** @type {?} */ gamma1x = W[i - 2];\n                var /** @type {?} */ gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n                    (gamma1x >>> 10);\n                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n            }\n            var /** @type {?} */ ch = (e & f) ^ (~e & g);\n            var /** @type {?} */ maj = (a & b) ^ (a & c) ^ (b & c);\n            var /** @type {?} */ sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n            var /** @type {?} */ sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));\n            var /** @type {?} */ t1 = h + sigma1 + ch + K[i] + W[i];\n            var /** @type {?} */ t2 = sigma0 + maj;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        // Intermediate hash value\n        Hl[0] = (Hl[0] + a) | 0;\n        Hl[1] = (Hl[1] + b) | 0;\n        Hl[2] = (Hl[2] + c) | 0;\n        Hl[3] = (Hl[3] + d) | 0;\n        Hl[4] = (Hl[4] + e) | 0;\n        Hl[5] = (Hl[5] + f) | 0;\n        Hl[6] = (Hl[6] + g) | 0;\n        Hl[7] = (Hl[7] + h) | 0;\n    };\n    /**\n     * @return {?}\n     */\n    SHA256.prototype._doFinalize = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ nBitsTotal = this._nDataBytes * 8;\n        var /** @type {?} */ nBitsLeft = this._data.sigBytes * 8;\n        // Add padding\n        this._data.words[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n        this._data.words[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        this._data.words[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n        this._data.sigBytes = this._data.words.length * 4;\n        // Hash final blocks\n        this._process();\n        // Return final computed hash\n        return this._hash;\n    };\n    return SHA256;\n}(Hasher));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NoPadding = /** @class */ (function () {\n    function NoPadding() {\n    }\n    /**\n     * Doesn't pad the data provided.\n     *\n     * \\@example\n     *\n     *     NoPadding.pad(wordArray, 4);\n     * @param {?} data The data to pad.\n     * @param {?} blockSize The multiple that the data should be padded to.\n     *\n     * @return {?}\n     */\n    NoPadding.pad = /**\n     * Doesn't pad the data provided.\n     *\n     * \\@example\n     *\n     *     NoPadding.pad(wordArray, 4);\n     * @param {?} data The data to pad.\n     * @param {?} blockSize The multiple that the data should be padded to.\n     *\n     * @return {?}\n     */\n    function (data, blockSize) {\n    };\n    /**\n     * Doesn't unpad the data provided.\n     *\n     * \\@example\n     *\n     *     NoPadding.unpad(wordArray);\n     * @param {?} data The data to unpad.\n     *\n     * @return {?}\n     */\n    NoPadding.unpad = /**\n     * Doesn't unpad the data provided.\n     *\n     * \\@example\n     *\n     *     NoPadding.unpad(wordArray);\n     * @param {?} data The data to unpad.\n     *\n     * @return {?}\n     */\n    function (data) {\n    };\n    return NoPadding;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ECBEncryptor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ECBEncryptor, _super);\n    function ECBEncryptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    ECBEncryptor.prototype.processBlock = /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    function (words, offset) {\n        this._cipher.encryptBlock(words, offset);\n    };\n    return ECBEncryptor;\n}(BlockCipherModeAlgorithm));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ECBDecryptor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ECBDecryptor, _super);\n    function ECBDecryptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    ECBDecryptor.prototype.processBlock = /**\n     * Processes the data block at offset.\n     *\n     * \\@example\n     *\n     *     mode.processBlock(data.words, offset);\n     * @param {?} words The data words to operate on.\n     * @param {?} offset The offset where the block starts.\n     *\n     * @return {?}\n     */\n    function (words, offset) {\n        this._cipher.decryptBlock(words, offset);\n    };\n    return ECBDecryptor;\n}(BlockCipherModeAlgorithm));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Cipher Block Chaining mode.\n * @abstract\n */\nvar ECB = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ECB, _super);\n    function ECB() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ECB.Encryptor = ECBEncryptor;\n    ECB.Decryptor = ECBDecryptor;\n    return ECB;\n}(BlockCipherMode));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ lib = {\n    BlockCipher: BlockCipher,\n    WordArray: WordArray,\n    CipherParams: CipherParams,\n    Hasher: Hasher,\n    SerializableCipher: SerializableCipher,\n    PasswordBasedCipher: PasswordBasedCipher\n};\nvar /** @type {?} */ algo = {\n    AES: AES,\n    SHA256: SHA256\n};\nvar /** @type {?} */ enc = {\n    Utf8: Utf8,\n    Hex: Hex\n};\nvar /** @type {?} */ pad = {\n    NoPadding: NoPadding,\n    PKCS7: PKCS7\n};\nvar /** @type {?} */ mode = {\n    CBC: CBC,\n    ECB: ECB\n};\n// HELPERS /////////////////////////////////////////////////////////////////////////////////////////\nvar /** @type {?} */ AES$1 = lib.BlockCipher._createHelper(algo.AES);\nvar /** @type {?} */ SHA256$1 = lib.Hasher._createHelper(algo.SHA256);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\n//# sourceMappingURL=crypto-ts.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/crypto-ts/esm5/crypto-ts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/crypto-ts/node_modules/tslib/tslib.es6.js":
/*!****************************************************************!*\
  !*** ./node_modules/crypto-ts/node_modules/tslib/tslib.es6.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/crypto-ts/node_modules/tslib/tslib.es6.js\n");

/***/ })

};
;